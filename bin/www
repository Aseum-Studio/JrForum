#!/usr/bin/env node

/**
 * 配置证书
 */
// Configuare https
const fs = require("fs");
const httpsOption = {
    key: fs.readFileSync(__dirname + "/2021092101_29.key"),
    cert: fs.readFileSync(__dirname + "/2021092101_29.pem")
}

/**
 * Module dependencies.
 */
console.log('openning server...');
var app = require('../app');
var debug = require('debug')('jrforum:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '233');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(httpsOption, app);
console.log('server start!at port' + port);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}


// Create service
// let app = express();
// http.createServer(app).listen(80)
// https.createServer(httpsOption, app).listen(233);

// var https = require('https'); // https服务器
// const fs = require("fs"); // 文件输入输出，用来导入证书

// var privateKey = fs.readFileSync('./cert/ca.key').toString();
// var certificate = fs.readFileSync('./cert/ca.crt').toString();
// var client_certificate = fs.readFileSync('./cert/client.crt').toString();